<launch>
  <!-- Debug flag -->
  <arg name="debug" default="0"/>


  <arg name="x"     default="0"/>
  <arg name="y"     default="0"/>
  <arg name="z"     default="0"/>
  <arg name="roll"  default="0"/>
  <arg name="pitch" default="0"/>
  <arg name="yaw"   default="0"/>

  <arg name="use_geodetic" default="false"/>
  <arg name="latitude" default="0"/>
  <arg name="longitude" default="0"/>
  <arg name="depth" default="0"/>

  <arg name="latitude_ref" default="0"/>
  <arg name="longitude_ref" default="0"/>
  <arg name="altitude_ref" default="0"/>

  <arg name="concept" default="test"/>

  <!-- Mode to open different robot configurations as set the in file
  nomenclature standard for the files in /robots
  -->

  <arg name="mode" default="default"/>

  <!-- Vehicle's namespace -->
  <arg name="namespace" default="mccr"/>

  <arg name="world_frame" default="world"/>

  <group ns="$(arg namespace)">
    <param name="robot_description"
           command="$(find mccr_gazebo_ros_plugins)/test/urdf/magnet.urdf" />

  <!-- <group ns="$(arg namespace)">
    <param name="robot_description"
           command="$(find xacro)/xacro.py --inorder '$(find mccr_gazebo_ros_plugins)/test/urdf/$(arg mode)_$(arg concept).xacro' debug:=$(arg debug) namespace:=$(arg namespace) concept:=$(arg concept)" /> -->   

    <!-- <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/> -->

    <!-- A joint state publisher plugin already is started with the model, no need to use the default joint state publisher -->

    <!-- Publish robot model for ROS -->

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <param name="robot_description" value="/$(arg namespace)/robot_description" />
    </node>
  </group>

  <node name="ground_truth_to_tf_$(arg namespace)" pkg="message_to_tf" type="message_to_tf" output="screen">
    <param name="~odometry_topic" value="/odom" />
    <param name="~frame_id" value="/world" />
    <param name="~stabilized_frame_id" value="/$(arg namespace)/base_stabilized" />
    <param name="~footprint_frame_id" value="/$(arg namespace)/base_footprint" />
    <param name="~child_frame_id" value="/$(arg namespace)/base_link" />
  </node>


</launch>
